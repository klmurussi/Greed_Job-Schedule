{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Run away O que \u00e9 o nosso projeto? O nosso projeto \u00e9 um organizador de tarefas para empresa, que identifica o minimo de funcion\u00e1rios necess\u00e1rios para realizar suas tarefas. Al\u00e9m disso organiza funcion\u00e1rios de forma eficiente. Membros: Nome Github Matr\u00edcula Kathlyn Lara Murussi @klmurussi 18/0042378 J\u00falio C\u00e9sar Schneider Martins @jschneiderm98 16/0032903 Screenshots Exemplo de preenchimento a partir do terminal Resultado do exemplo de preenchimento a partir do terminal Preenchimento a partir do .txt, utilizando o exemplo test1.txt V\u00eddeo da dupla","title":"In\u00edcio"},{"location":"#run-away","text":"","title":"Run away"},{"location":"#o-que-e-o-nosso-projeto","text":"O nosso projeto \u00e9 um organizador de tarefas para empresa, que identifica o minimo de funcion\u00e1rios necess\u00e1rios para realizar suas tarefas. Al\u00e9m disso organiza funcion\u00e1rios de forma eficiente.","title":"O que \u00e9 o nosso projeto?"},{"location":"#membros","text":"Nome Github Matr\u00edcula Kathlyn Lara Murussi @klmurussi 18/0042378 J\u00falio C\u00e9sar Schneider Martins @jschneiderm98 16/0032903","title":"Membros:"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#exemplo-de-preenchimento-a-partir-do-terminal","text":"","title":"Exemplo de preenchimento a partir do terminal"},{"location":"#resultado-do-exemplo-de-preenchimento-a-partir-do-terminal","text":"","title":"Resultado do exemplo de preenchimento a partir do terminal"},{"location":"#preenchimento-a-partir-do-txt-utilizando-o-exemplo-test1txt","text":"","title":"Preenchimento a partir do .txt, utilizando o exemplo test1.txt"},{"location":"#video-da-dupla","text":"","title":"V\u00eddeo da dupla"},{"location":"ambiente/","text":"Instala\u00e7\u00e3o Linguagem : Python Biblioteca : pip3 O projeto foi criado em um ambiente de desenvolvimento linux utilizando a IDE VSCode Inicialmente, caso n\u00e3o haja uma vers\u00e3o instalada, instale o python3 Tamb\u00e9m \u00e9 necess\u00e1rio utilizar o gerenciador de pacotes do python3 o pip3 Ap\u00f3s obter o pip3, basta utilizar o pip3 pela linha de comando para obter a bilbioteca pythonds pip3 install pythonds Caso esteja utilizando o VSCode, \u00e9 interessante instalar as extens\u00f5es Pylance e Python Uso Para uso do projeto basta rodar o projeto a partir da pasta do projeto. python3 main.py Ao utilizar esse met\u00f3do, basta seguir as requisi\u00e7\u00f5es do terminal e registrar as requiridas atividades. Para realizar o cadastro mais rapidamente, pode ser \u00fatil inicializar o programa com um arquivo de texto contendo as tarefas, o modelo do arquivo \u00e9 mostrado abaixo. Atividade1 //aqui se deve colocar o nome da atividade 10 //aqui se deve colocar a hora do \u00ednicio da atividade, n\u00e3o s\u00e3o aceitos hor\u00e1rios decimais, apenas inteiros 11 //horario final da atividade, apenas inteiros 1 2 3 //dias da semana que a atividade acontecer\u00e1, insira apenas espa\u00e7os ou um numero de 1 a 7 nesse campo S //caso queira ou n\u00e3o adicionar outra ativida (S para sim, N para n\u00e3o) Atividade2 12 14 2 N Para executar o c\u00f3digo com aux\u00edlio do arquivo texto basta seguir esse exemplo. O exemplo acima est\u00e1 dispon\u00edvel no reposit\u00f3rio como test2.txt python3 sources/main.py < seuarquivo.txt Obs.: No reposit\u00f3rio h\u00e1 os arquivos test1.txt e test2.txt previamente preenchidos como exemplo para teste","title":"Ambiete de desenvolvimento"},{"location":"ambiente/#instalacao","text":"Linguagem : Python Biblioteca : pip3 O projeto foi criado em um ambiente de desenvolvimento linux utilizando a IDE VSCode Inicialmente, caso n\u00e3o haja uma vers\u00e3o instalada, instale o python3 Tamb\u00e9m \u00e9 necess\u00e1rio utilizar o gerenciador de pacotes do python3 o pip3 Ap\u00f3s obter o pip3, basta utilizar o pip3 pela linha de comando para obter a bilbioteca pythonds pip3 install pythonds Caso esteja utilizando o VSCode, \u00e9 interessante instalar as extens\u00f5es Pylance e Python","title":"Instala\u00e7\u00e3o"},{"location":"ambiente/#uso","text":"Para uso do projeto basta rodar o projeto a partir da pasta do projeto. python3 main.py Ao utilizar esse met\u00f3do, basta seguir as requisi\u00e7\u00f5es do terminal e registrar as requiridas atividades. Para realizar o cadastro mais rapidamente, pode ser \u00fatil inicializar o programa com um arquivo de texto contendo as tarefas, o modelo do arquivo \u00e9 mostrado abaixo. Atividade1 //aqui se deve colocar o nome da atividade 10 //aqui se deve colocar a hora do \u00ednicio da atividade, n\u00e3o s\u00e3o aceitos hor\u00e1rios decimais, apenas inteiros 11 //horario final da atividade, apenas inteiros 1 2 3 //dias da semana que a atividade acontecer\u00e1, insira apenas espa\u00e7os ou um numero de 1 a 7 nesse campo S //caso queira ou n\u00e3o adicionar outra ativida (S para sim, N para n\u00e3o) Atividade2 12 14 2 N Para executar o c\u00f3digo com aux\u00edlio do arquivo texto basta seguir esse exemplo. O exemplo acima est\u00e1 dispon\u00edvel no reposit\u00f3rio como test2.txt python3 sources/main.py < seuarquivo.txt Obs.: No reposit\u00f3rio h\u00e1 os arquivos test1.txt e test2.txt previamente preenchidos como exemplo para teste","title":"Uso"},{"location":"code/","text":"Algoritmo do programa Inicialmente \u00e9 utilizado uma loop que recebe as entradas do usu\u00e1rio, e essas entradas s\u00e3o armazenadas. while True : print ( \" \\n Digite o nome da atividade: \" ) nome = input () while True : print ( \" \\n Digite o hor\u00e1rio que come\u00e7a '\" + nome + \"':\" ) horarioInicial = input () if int ( horarioInicial ) >= 0 and int ( horarioInicial ) <= 23 : break . . . Cada atividade \u00e9 armazenada em um objeto do tipo Atividade class Atividade : def __init__ ( self , nome , horarioInicial , horarioFinal ): self . nome = nome self . horarioInicial = horarioInicial self . horarioFinal = horarioFinal E todos as atividades s\u00e3o armazenadas em um objeto de tipo Tudo, e cada atividade \u00e9 discrimida pelo dia da semana class Tudo : def __init__ ( self ): self . atividades = { 1 :[], 2 :[], 3 :[], 4 :[], 5 :[], 6 :[], 7 :[]} def add ( self , atividade , dia ): self . atividades [ dia ] . append ( atividade ) Ap\u1e4ds isso, para todos dias das semana, a lista que cont\u00e9m as atividades que os funcion\u00e1rios ter\u00e3o que fazer s\u00e3o ordenadas a partir do hor\u00e1rio inicial sortedAtividades = [] for i in atividades . atividades : sortedAtividades . append ( sorted ( atividades . atividades [ i ], key = lambda x : x . horarioInicial )) Ap\u00f3s isso, para cada dia da semana \u00e9 utilizado o algoritmo ganancioso \"interval partioning\" para utilizar o m\u00ednimo de fucion\u00e1rios poss\u00edveis para realizar as atividades previamente inseridas, al\u00e9m disso, s\u00e3o registradas as atividades de cada funcion\u00e1rio count = 0 for j in sortedAtividades : funcionarios = PriorityQueue () qtd_funcionarios = 0 atividadesDia = {} count += 1 for i in j : if not funcionarios . isEmpty (): disponivel = funcionarios . delMin () #print (disponivel) else : disponivel = None if disponivel is not None : if i . horarioInicial >= disponivel [ 0 ]: funcionarios . add ( ( i . horarioFinal , ( i . horarioFinal , disponivel [ 1 ]))) atividadesDia [ disponivel [ 1 ]] . append ( i ) else : funcionarios . add (( disponivel [ 0 ], disponivel )) qtd_funcionarios += 1 atividadesDia [ qtd_funcionarios ] = [] funcionarios . add ( ( i . horarioFinal , ( i . horarioFinal , qtd_funcionarios ))) atividadesDia [ qtd_funcionarios ] . append ( i ) else : qtd_funcionarios += 1 atividadesDia [ qtd_funcionarios ] = [] funcionarios . add ( ( i . horarioFinal , ( i . horarioFinal , qtd_funcionarios ))) atividadesDia [ qtd_funcionarios ] . append ( i ) Por \u00faltimo \u00e9 impresso no terminal o dia, o min\u00edmo de funcion\u00e1rios para aquele dia, e as atividades que cada funcion\u00e1rio deve realizar print ( daySelector . selectDia ( count )) print ( \"Min\u00edmo de funcion\u00e1rios: \" + str ( qtd_funcionarios )) for i in atividadesDia : print ( \"funcionario \" + str ( i ) + \" Atividades:\" ) for j in atividadesDia [ i ]: print ( j )","title":"Algoritmo do jogo"},{"location":"code/#algoritmo-do-programa","text":"Inicialmente \u00e9 utilizado uma loop que recebe as entradas do usu\u00e1rio, e essas entradas s\u00e3o armazenadas. while True : print ( \" \\n Digite o nome da atividade: \" ) nome = input () while True : print ( \" \\n Digite o hor\u00e1rio que come\u00e7a '\" + nome + \"':\" ) horarioInicial = input () if int ( horarioInicial ) >= 0 and int ( horarioInicial ) <= 23 : break . . . Cada atividade \u00e9 armazenada em um objeto do tipo Atividade class Atividade : def __init__ ( self , nome , horarioInicial , horarioFinal ): self . nome = nome self . horarioInicial = horarioInicial self . horarioFinal = horarioFinal E todos as atividades s\u00e3o armazenadas em um objeto de tipo Tudo, e cada atividade \u00e9 discrimida pelo dia da semana class Tudo : def __init__ ( self ): self . atividades = { 1 :[], 2 :[], 3 :[], 4 :[], 5 :[], 6 :[], 7 :[]} def add ( self , atividade , dia ): self . atividades [ dia ] . append ( atividade ) Ap\u1e4ds isso, para todos dias das semana, a lista que cont\u00e9m as atividades que os funcion\u00e1rios ter\u00e3o que fazer s\u00e3o ordenadas a partir do hor\u00e1rio inicial sortedAtividades = [] for i in atividades . atividades : sortedAtividades . append ( sorted ( atividades . atividades [ i ], key = lambda x : x . horarioInicial )) Ap\u00f3s isso, para cada dia da semana \u00e9 utilizado o algoritmo ganancioso \"interval partioning\" para utilizar o m\u00ednimo de fucion\u00e1rios poss\u00edveis para realizar as atividades previamente inseridas, al\u00e9m disso, s\u00e3o registradas as atividades de cada funcion\u00e1rio count = 0 for j in sortedAtividades : funcionarios = PriorityQueue () qtd_funcionarios = 0 atividadesDia = {} count += 1 for i in j : if not funcionarios . isEmpty (): disponivel = funcionarios . delMin () #print (disponivel) else : disponivel = None if disponivel is not None : if i . horarioInicial >= disponivel [ 0 ]: funcionarios . add ( ( i . horarioFinal , ( i . horarioFinal , disponivel [ 1 ]))) atividadesDia [ disponivel [ 1 ]] . append ( i ) else : funcionarios . add (( disponivel [ 0 ], disponivel )) qtd_funcionarios += 1 atividadesDia [ qtd_funcionarios ] = [] funcionarios . add ( ( i . horarioFinal , ( i . horarioFinal , qtd_funcionarios ))) atividadesDia [ qtd_funcionarios ] . append ( i ) else : qtd_funcionarios += 1 atividadesDia [ qtd_funcionarios ] = [] funcionarios . add ( ( i . horarioFinal , ( i . horarioFinal , qtd_funcionarios ))) atividadesDia [ qtd_funcionarios ] . append ( i ) Por \u00faltimo \u00e9 impresso no terminal o dia, o min\u00edmo de funcion\u00e1rios para aquele dia, e as atividades que cada funcion\u00e1rio deve realizar print ( daySelector . selectDia ( count )) print ( \"Min\u00edmo de funcion\u00e1rios: \" + str ( qtd_funcionarios )) for i in atividadesDia : print ( \"funcionario \" + str ( i ) + \" Atividades:\" ) for j in atividadesDia [ i ]: print ( j )","title":"Algoritmo do programa"},{"location":"questoes/quest5/","text":"Quest\u00e3o 5 Pense nas casas como n pontos em uma linha na ordem da esquerda para direita, Hi \u00e9 o n\u00famero da posi\u00e7\u00e3o em milhas da casa at\u00e9 a linha. H = [H1, H2, H3, H4, ..., Hn] E a base das esta\u00e7\u00f5es \u00e9 um outro ponto k na mesma linha. Pj \u00e9 um n\u00famero da posi\u00e7\u00e3o em milhas das bases de esta\u00e7\u00e3o at\u00e9 a linha P = [P1, P2, P3, P4, ... , Pn] A solu\u00e7\u00e3o \u00e9 poss\u00edvel se cada ponto Hi est\u00e1 a 4 milhas de um ponto Pj. A estrat\u00e9gia ganaciosa \u00e9 colocar P1 exatamente 4 milhas a direita de H1, remover todas as casa cobertas por P1, dentro de 4 milhas de P1, e ent\u00e3o recursivamente resolver o sub-problema que cont\u00e9m o resto das casas. def bases ( H , P ): if H is None : return P else : Pj is exctly four miles to the right of H1 P . append ( Pj ) for i in H : if i < Pj + 4 miles : remove i from H return bases ( H , P )","title":"Quest\u00e3o 5"},{"location":"questoes/quest5/#questao-5","text":"Pense nas casas como n pontos em uma linha na ordem da esquerda para direita, Hi \u00e9 o n\u00famero da posi\u00e7\u00e3o em milhas da casa at\u00e9 a linha. H = [H1, H2, H3, H4, ..., Hn] E a base das esta\u00e7\u00f5es \u00e9 um outro ponto k na mesma linha. Pj \u00e9 um n\u00famero da posi\u00e7\u00e3o em milhas das bases de esta\u00e7\u00e3o at\u00e9 a linha P = [P1, P2, P3, P4, ... , Pn] A solu\u00e7\u00e3o \u00e9 poss\u00edvel se cada ponto Hi est\u00e1 a 4 milhas de um ponto Pj. A estrat\u00e9gia ganaciosa \u00e9 colocar P1 exatamente 4 milhas a direita de H1, remover todas as casa cobertas por P1, dentro de 4 milhas de P1, e ent\u00e3o recursivamente resolver o sub-problema que cont\u00e9m o resto das casas. def bases ( H , P ): if H is None : return P else : Pj is exctly four miles to the right of H1 P . append ( Pj ) for i in H : if i < Pj + 4 miles : remove i from H return bases ( H , P )","title":"Quest\u00e3o 5"},{"location":"questoes/quest7/","text":"Quest\u00e3o 7 A estrat\u00e9gia gananciosa escolhida para solucionar o problema \u00e9: Inicialmente ordene inversamente as atividades por f. Isso se deve ao fato de que independente da ordem de p, todas as atividades passar\u00e3o pelo super computador, por\u00e9m quanto mais cedo uma tarefa \u00e9 inserida no PC's, mais tempo ela ficar\u00e1 l\u00e1, logo, para otimizar o tempo, as atividades que precisam de maior tempo nos PC's devem ser as primeiras. Insira as atividades no super-computador a partir da ordena\u00e7\u00e3o. Exemplo de pseudo-c\u00f3digo baseado em python: atividadesOrdenadas = sorted ( atividades , key = lambda x : x . f , reverse = True ) for i in atividadesOrdenadas : i . insertInSuper (); i . insertInPC ();","title":"Quest\u00e3o 7"},{"location":"questoes/quest7/#questao-7","text":"A estrat\u00e9gia gananciosa escolhida para solucionar o problema \u00e9: Inicialmente ordene inversamente as atividades por f. Isso se deve ao fato de que independente da ordem de p, todas as atividades passar\u00e3o pelo super computador, por\u00e9m quanto mais cedo uma tarefa \u00e9 inserida no PC's, mais tempo ela ficar\u00e1 l\u00e1, logo, para otimizar o tempo, as atividades que precisam de maior tempo nos PC's devem ser as primeiras. Insira as atividades no super-computador a partir da ordena\u00e7\u00e3o. Exemplo de pseudo-c\u00f3digo baseado em python: atividadesOrdenadas = sorted ( atividades , key = lambda x : x . f , reverse = True ) for i in atividadesOrdenadas : i . insertInSuper (); i . insertInPC ();","title":"Quest\u00e3o 7"}]}